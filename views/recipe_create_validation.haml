#new-recipe.edit-or-create-recipe
  %form#recipe-form
    %label(for='recipe-name')< #{UnicodeUtils::titlecase(t.ui.recipe_name)}:
    %input#recipe-name.ui-corner-all(placeholder = 'What do you call your recipe?')
    %label.error(for='recipe-name' generated = 'true')
    %label(for="serves")< #{UnicodeUtils::titlecase(t.ui.serves)}:
    %input#serves.ui-corner-all(style='width:3em;')
    %label.error(for = 'serves' generated = 'true')
    / %label.ui-state-disabled(for = "meal")< Meal Name:
    / %input#meal.ui-corner-all.ui-state-disabled{:disabled => 'disabled', :placeholder => 'not set'}
    / %label.error(for = 'meal' generated = 'true')
    %label(for='description')< #{UnicodeUtils::titlecase(t.ui.description)}:
    %textarea#description.ui-corner-all
    %label.error(for = 'description' generated = 'true')
    %label(for='prep-time')< #{UnicodeUtils::titlecase(t.ui.preparation_time)}:
    %span#prep-time
      %input#prep-time-days.ui-corner-all{:style=>'width:2em;margin-right:1em;', :placeholder => 'dd'}
      %input#prep-time-hours.ui-corner-all{:style=>'width:2em;margin-right:1em;', :placeholder => 'hh'}
      %input#prep-time-minutes.ui-corner-all{:style=>'width:2em;', :placeholder => 'mm'}
    %label.error(for = 'prep-time' generated = 'true')
    %label(for='cooking-time')< #{UnicodeUtils::titlecase(t.ui.cooking_time)}:
    %span#cooking-time
      %input#cooking-time-days.ui-corner-all{:style=>'width:2em;margin-right:1em;', :placeholder => 'dd'}
      %input#cooking-time-hours.ui-corner-all{:style=>'width:2em;margin-right:1em;', :placeholder => 'hh'}
      %input#cooking-time-minutes.ui-corner-all{:style=>'width:2em;', :placeholder => 'mm'}
    %label.error(for = 'cooking-time' generated = 'true')
    %label(for='requirements')< #{UnicodeUtils::titlecase(t.ui.requirements)}
    %textarea#requirements.ui-corner-all
    %label.error(for = 'requirements' generated = 'true')
    %label(for='ingredients')< #{UnicodeUtils::titlecase(t.ui.ingredients)}
    %table#ingredients
      %thead
        %tr
          %th< #{UnicodeUtils::titlecase(t.ui.ingredient_name)}
          %th< #{UnicodeUtils::titlecase(t.ui.amount)}
          %th< #{UnicodeUtils::titlecase(t.ui.unit)}
      %tbody
    %label(for='method')< #{UnicodeUtils::titlecase(t.ui.the_method)}
    %textarea#method.ui-corner-all
    %label.error(for = 'method' generated = 'true')
    %label(for='action-bar')< &nbsp;
    %span#action-bar.edit-or-create-recipe
      %input#choose-photo.action-button(type='submit')
      %input#save-recipe.action-button(type='submit')
      %input#cancel.action-button.ui-priority-secondary(type='submit')
:javascript
  var allowed_unit_options = #{allowed_units};
  var all_ingredient_names = #{ingredient_names}
  var default_allowed_unit_options = convert_to_options_html(allowed_unit_options);
  var recipe_id = 0;
  var button_names = {
    'choose-photo': "#{Unicode::capitalize(t.ui.choose_photo)}",
    'save-recipe': "#{UnicodeUtils::titlecase(t.ui.create_recipe)}",
    'cancel': "#{Unicode::capitalize(t.ui.cancel)}"
  }
:javascript
  var ingredient_name_autocompleter = {
    source: all_ingredient_names,
    change: function(){
      var this_row = $(this).parent().parent();
      if (this_row.is(':last-child')) {
        // add another row.
        var new_row_number = this_row.siblings('tr').length + 1;
        $(create_blank_ingredients_row(new_row_number)).appendTo(this_row.parent());
        var new_row = this_row.next();
        $(default_allowed_unit_options).appendTo(new_row.find('.unit-menu'));
        new_row.find('.ingredient').autocomplete(ingredient_name_autocompleter);
      }
    }
  };

  $(function() {
    $.validator.setDefaults({
      submitHandler: function() { alert("submitted!"); },
      debug: true
    });
    // set up three ingredient rows, with appropriate Unit menus
    for (i = 0; i < 3; i++) {
      var i_row = $(create_blank_ingredients_row(i));
      i_row.appendTo('#ingredients tbody');
    }
    $(default_allowed_unit_options).appendTo('#ingredients .unit-menu');
    $('#ingredients .ingredient').autocomplete(ingredient_name_autocompleter);

    $("input:submit").button({
      create: function(event, ui) {
        $(this).val(button_names[$(this).attr('id')]);
      }
    });
    // console.log("form:",$("form#recipe-form"));
    
    // testing jQuery Validation plugin.
    $("form#recipe-form").validate({
      onkeyup: false,
      rules: {
        serves: {
          required: true,
          number: true
        }
      },
      messages: {
        serves: 'You must specify the number of people this recipe serves.'
      }
    });
    console.log("form:",$("form#recipe-form"));
  });